{"version":3,"sources":["serviceWorker.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeDijkstra","visualizeBFS","visualizeDFS","speed","value","updateSpeed","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","changeSpeed","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","neighbourNotInUnvisitedNodes","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","random","getStartFinishNode","PathfindingVisualizer","mouseIsPressed","updateDimensions","path","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","slice","newNode","addEventListener","getInitialGrid","getNewGridWithWalls","getGridWithoutPath","currentNode","unshift","getNodesInShortestPathOrderDijkstra","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","num","randomNums1","temp","randomNums2","currentRow","createNode","totalDistance","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2a85daf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isWall,\n      isVisited,\n      isShortest,\n      onMouseEnter,\n      onMouseDown,\n      onMouseUp,\n      width,\n      height,\n      numRows,\n      numColumns,\n    } = this.props;\n\n    const extraClass = isStart\n      ? \"node node-start\"\n      : isFinish\n      ? \"node node-finish\"\n      : isWall\n      ? \"node-wall\"\n      : isShortest\n      ? \"node node-shortest-path\"\n      : isVisited\n      ? \"node node-visited\"\n      : \"node\";\n\n    let cellWidth = Math.floor((width - 15) / numColumns);\n    let cellHeight;\n    if (width > 1500) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 1000) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 500) {\n      cellHeight = Math.floor((height - 60) / numRows);\n    } else if (width > 0) {\n      cellHeight = Math.floor((height - 50) / numRows);\n    }\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`${extraClass}`}\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\n\nclass NavBar extends Component {\n  state = {\n    algorithm: \"Visualize Algorithm\",\n    maze: \"Generate Maze\",\n    pathState: false,\n    mazeState: false,\n    speedState: \"Speed\",\n  };\n\n  selectAlgorithm(selection) {\n    if (this.props.visualizingAlgorithm) {\n      return;\n    }\n    if (\n      selection === this.state.algorithm ||\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: selection });\n    } else if (this.state.pathState) {\n      this.clearPath();\n      this.setState({ algorithm: selection });\n    } else {\n      this.setState({ algorithm: selection });\n    }\n  }\n\n  selectMaze(selection) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (\n      selection === this.state.maze ||\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: selection });\n    } else if (!this.state.mazeState) {\n      this.setState({ maze: selection });\n    } else {\n      this.clearGrid();\n      this.setState({ maze: selection });\n    }\n  }\n\n  visualizeAlgorithm() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (this.state.pathState) {\n      this.clearTemp();\n      return;\n    }\n    if (\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: \"Select an Algorithm!\" });\n    } else {\n      this.setState({ pathState: true });\n      if (this.state.algorithm === \"Visualize Dijkstra\")\n        this.props.visualizeDijkstra();\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\n        this.props.visualizeBFS();\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\n        this.props.visualizeDFS();\n\n    }\n  }\n\n  clearGrid() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      algorithm: \"Visualize Algorithm\",\n      maze: \"Generate Maze\",\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearPath() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearPath();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearTemp() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  changeSpeed(speed) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    let value = [10, 10];\n    if (speed === \"Slow\") value = [50, 30];\n    else if (speed === \"Medium\") value = [25, 20];\n    else if (speed === \"Fast\") value = [10, 10];\n    this.setState({ speedState: speed });\n    this.props.updateSpeed(value[0], value[1]);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <p\n          className=\"navbar-brand h1 mb-0\"\n        >\n          {brand}\n        </p>\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-light dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  Algorithms\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\n                  >\n                    Dijkstra's Algorithm\n                  </button>\n\n                  <div className=\"dropdown-divider\"></div>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\n                    }\n                  >\n                    Breadth First Search\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() =>\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\n                    }\n                  >\n                    Depth First Search\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => this.visualizeAlgorithm()}\n              >\n                {this.state.algorithm}\n              </button>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                onClick={() => this.clearGrid()}\n              >\n                Clear Gird\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-info dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  {this.state.speedState}\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Slow\")}\n                  >\n                    Slow\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Medium\")}\n                  >\n                    Medium\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Fast\")}\n                  >\n                    Fast\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n          </ul>\n        </div>\n        <p\n          className=\"navbar-brand\"\n        >\n          Add Walls by clicking on mouse \n        </p>\n      </nav>\n    );\n  }\n}\nexport default NavBar;\n","export function dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  let unvisitedNodes = getNodes(grid);\n  let visitedNodesInOrder = [];\n  while (unvisitedNodes.length !== 0) {\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    updateUnvisitedNeighbours(closestNode, grid);\n  }\n}\n\nfunction getNodes(grid) {\n  let nodes = [];\n  for (let row of grid) {\n    for (let node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction updateUnvisitedNeighbours(node, grid) {\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\n    unvisitedNeighbour.distance = node.distance + 1;\n    unvisitedNeighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours\n    .filter((neighbour) => !neighbour.isWall)\n    .filter((neighbour) => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function breadthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\n        unvisitedNodes.push(unvisitedNeighbour);\n      }\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n  for (let node of unvisitedNodes) {\n    if (node.row === neighbour.row && node.col === neighbour.col) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getNodesInShortestPathOrderBFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function depthFirstSearch(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let unvisitedNodes = [];\n  let visitedNodesInOrder = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    let closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.previousNode = closestNode;\n      unvisitedNodes.unshift(unvisitedNeighbour);\n    }\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  let neighbours = [];\n  let { row, col } = node;\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode) {\n  let nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport \"./pathfindingVisualizer.css\";\nimport Node from \"./Node/node\";\nimport NavBar from \"./navbar\";\n\n//Pathfinding Algorithms\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"../pathfindingAlgorithms/dijkstra\";\n\nimport {\n  breadthFirstSearch,\n  getNodesInShortestPathOrderBFS,\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\nimport {\n  depthFirstSearch,\n  getNodesInShortestPathOrderDFS,\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\n\n\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);\nconst startNodeRow = startFinishNode[0];\nconst startNodeCol = startFinishNode[1];\nconst finishNodeRow = startFinishNode[2];\nconst finishNodeCol = startFinishNode[3];\n\nclass PathfindingVisualizer extends Component {\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    visualizingAlgorithm: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 10,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  updateSpeed = (path) => {\n    this.setState({ speed: path });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  clearGrid() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          !(\n            (row === startNodeRow && col === startNodeCol) ||\n            (row === finishNodeRow && col === finishNodeCol)\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n    });\n  }\n\n  clearPath() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          \"node node-shortest-path\"\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n    });\n  }\n\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\n    if (nodesInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\n      if (i === nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updateNodesForRender(\n            this.state.grid,\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        return;\n      }\n      let node = nodesInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, i * (3 * this.state.speed));\n    }\n  };\n\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          isVisited: false,\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n  visualizeDijkstra() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeBFS() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = breadthFirstSearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  visualizeDFS() {\n    if (this.state.visualizingAlgorithm) {\n      return;\n    }\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\n        finishNode\n      );\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, this.state.speed);\n  }\n\n  render() {\n    let { grid } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\n          visualizeBFS={this.visualizeBFS.bind(this)}\n          visualizeDFS={this.visualizeDFS.bind(this)}\n          clearGrid={this.clearGrid.bind(this)}\n          clearPath={this.clearPath.bind(this)}\n          updateSpeed={this.updateSpeed.bind(this)}\n        />\n        <div\n          className={\n            this.state.visualizingAlgorithm\n              ? \"grid-visualizing\"\n              : \"grid\"\n          }\n        >\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isShortest,\n                    isWall,\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isShortest={isShortest}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      width={this.state.width}\n                      height={this.state.height}\n                      numRows={this.state.numRows}\n                      numColumns={this.state.numColumns}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10);\n  }\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth);\n  return [numRows, numColumns];\n}\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n}\n\nfunction getStartFinishNode(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startNodeRow;\n  let startNodeCol;\n  let finishNodeRow;\n  let finishNodeCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow =\n      x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startNodeCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    finishNodeRow =\n      x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    finishNodeCol =\n      numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startNodeCol =\n      y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    finishNodeRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    finishNodeCol =\n      y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === startNodeRow && col === startNodeCol,\n    isFinish: row === finishNodeRow && col === finishNodeCol,\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let node = grid[row][col];\n  let newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getGridWithoutPath = (grid) => {\n  let newGrid = grid.slice();\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = {\n        ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousNode: null,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n  return newGrid;\n};\n\nconst updateNodesForRender = (\n  grid,\n  nodesInShortestPathOrder,\n  visitedNodesInOrder\n) => {\n  let newGrid = grid.slice();\n  for (let node of visitedNodesInOrder) {\n    if (\n      (node.row === startNodeRow && node.col === startNodeCol) ||\n      (node.row === finishNodeRow && node.col === finishNodeCol)\n    )\n      continue;\n    let newNode = {\n      ...node,\n      isVisited: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n  for (let node of nodesInShortestPathOrder) {\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\n      return newGrid;\n    }\n    let newNode = {\n      ...node,\n      isVisited: false,\n      isShortest: true,\n    };\n    newGrid[node.row][node.col] = newNode;\n  }\n};\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}